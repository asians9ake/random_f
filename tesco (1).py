# -*- coding: utf-8 -*-
"""tesco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mE7A_wwDAZOEeXMORKCYG2Nk5q4n_L-S
"""

# 111
import numpy as np

a = np.array([
    [17, 24, 1, 8, 15],
    [23, 5, 7, 14, 16],
    [4, 6, 13, 20, 22],
    [10, 12, 19, 21, 3],
    [11, 18, 25, 2, 9]
])

print("a =")
print(a)

b = int(input("Enter the row < size of the Matrix: "))
c = int(input("Enter the column < size of the Matrix: "))
print("Element:", a[b, c])

N4 = [
    a[b+1, c] if b+1 < a.shape[0] else None,
    a[b-1, c] if b-1 >= 0 else None,
    a[b, c+1] if c+1 < a.shape[1] else None,
    a[b, c-1] if c-1 >= 0 else None
]

print("N4 =")
print(N4)

N8 = [
    a[b+1, c] if b+1 < a.shape[0] else None,
    a[b-1, c] if b-1 >= 0 else None,
    a[b, c+1] if c+1 < a.shape[1] else None,
    a[b, c-1] if c-1 >= 0 else None,
    a[b+1, c+1] if b+1 < a.shape[0] and c+1 < a.shape[1] else None,
    a[b+1, c-1] if b+1 < a.shape[0] and c-1 >= 0 else None,
    a[b-1, c-1] if b-1 >= 0 and c-1 >= 0 else None,
    a[b-1, c+1] if b-1 >= 0 and c+1 < a.shape[1] else None
]

print("N8 =")
print(N8)

ND = [
    a[b+1, c+1] if b+1 < a.shape[0] and c+1 < a.shape[1] else None,
    a[b+1, c-1] if b+1 < a.shape[0] and c-1 >= 0 else None,
    a[b-1, c-1] if b-1 >= 0 and c-1 >= 0 else None,
    a[b-1, c+1] if b-1 >= 0 and c+1 < a.shape[1] else None
]

print("ND =")
print(ND)

# 222a
import cv2
import matplotlib.pyplot as plt

i = cv2.imread('apple1.jpg')
i = cv2.cvtColor(i, cv2.COLOR_BGR2RGB)

plt.subplot(3, 2, 1)
plt.imshow(i)
plt.title('Original Image')
plt.axis('off')

r = i[:, :, 0]
plt.subplot(3, 2, 2)
plt.imshow(r, cmap='gray')
plt.title('Red Component')
plt.axis('off')

g = i[:, :, 1]
plt.subplot(3, 2, 3)
plt.imshow(g, cmap='gray')
plt.title('Green Component')
plt.axis('off')

b = i[:, :, 2]
plt.subplot(3, 2, 4)
plt.imshow(b, cmap='gray')
plt.title('Blue Component')
plt.axis('off')

rg = cv2.cvtColor(i, cv2.COLOR_RGB2GRAY)
plt.subplot(3, 2, 5)
plt.imshow(rg, cmap='gray')
plt.title('Gray Image')
plt.axis('off')

plt.tight_layout()
plt.show()

# 222b
import cv2
import numpy as np
import matplotlib.pyplot as plt

I = cv2.imread('apple1.jpg')
I_rgb = cv2.cvtColor(I, cv2.COLOR_BGR2RGB)

plt.subplot(2, 2, 1)
plt.imshow(I_rgb)
plt.title('Color Image')
plt.axis('off')

c = cv2.bitwise_not(I_rgb)
plt.subplot(2, 2, 2)
plt.imshow(c)
plt.title('Complement of Color Image')
plt.axis('off')

r = cv2.cvtColor(I_rgb, cv2.COLOR_RGB2GRAY)
plt.subplot(2, 2, 3)
plt.imshow(r, cmap='gray')
plt.title('Grayscale of Color Image')
plt.axis('off')

b = cv2.bitwise_not(r)
plt.subplot(2, 2, 4)
plt.imshow(b, cmap='gray')
plt.title('Complement of Gray Image')
plt.axis('off')

a = np.ones((40, 40), dtype=np.uint8)
b = np.zeros((40, 40), dtype=np.uint8)
c = np.hstack((a, b))
d = np.hstack((b, a))
e = np.vstack((c, d))

A = 10 * (c + d)
M = c * d
S = np.abs(c - d)
D = c // 4

plt.figure()

plt.subplot(3, 2, 1)
plt.imshow(c, cmap='gray')
plt.title('c')
plt.axis('off')

plt.subplot(3, 2, 2)
plt.imshow(d, cmap='gray')
plt.title('d')
plt.axis('off')

plt.subplot(3, 2, 3)
plt.imshow(A, cmap='gray')
plt.title('A = 10 * (c + d)')
plt.axis('off')

plt.subplot(3, 2, 4)
plt.imshow(M, cmap='gray')
plt.title('M = c * d')
plt.axis('off')

plt.subplot(3, 2, 5)
plt.imshow(S, cmap='gray')
plt.title('S = abs(c - d)')
plt.axis('off')

plt.subplot(3, 2, 6)
plt.imshow(D, cmap='gray')
plt.title('D = c // 4')
plt.axis('off')

plt.tight_layout()
plt.show()

# 3333a
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

image = cv2.imread('apple1.jpg')

scaling_factor = 0.5

scaled_image = cv2.resize(image, None, fx=scaling_factor, fy=scaling_factor, interpolation=cv2.INTER_LINEAR)

rotation_angle = 45

height, width = scaled_image.shape[:2]
rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), rotation_angle, 1)
rotated_image = cv2.warpAffine(scaled_image, rotation_matrix, (width, height))

cv2_imshow(image)
cv2_imshow(scaled_image)
cv2_imshow(rotated_image)

# 3bbbb

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

image = cv2.imread('apple1.jpg')

scaling_factors = [0.5, 2.0]

interpolation_methods = [cv2.INTER_NEAREST, cv2.INTER_LINEAR, cv2.INTER_CUBIC]

cv2_imshow(image)

for factor in scaling_factors:
    for method in interpolation_methods:
        scaled_image = cv2.resize(image, None, fx=factor, fy=factor, interpolation=method)
        method_name = ""
        if method == cv2.INTER_NEAREST:
            method_name = "Nearest Neighbor"
        elif method == cv2.INTER_LINEAR:
            method_name = "Bilinear"
        elif method == cv2.INTER_CUBIC:
            method_name = "Bicubic"
        cv2_imshow(scaled_image)
        print(f'Resized (Factor: {factor}, Method: {method_name})')

cv2.waitKey(0)
cv2.destroyAllWindows()

# 444
import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread('img1.jpg', cv2.IMREAD_GRAYSCALE)

min_intensity = np.min(image)
max_intensity = np.max(image)
stretched_image = cv2.normalize(image, None, 0, 255, norm_type=cv2.NORM_MINMAX)
equalized_image = cv2.equalizeHist(image)

hist_original = cv2.calcHist([image], [0], None, [256], [0, 256])
hist_stretched = cv2.calcHist([stretched_image], [0], None, [256], [0, 256])
hist_equalized = cv2.calcHist([equalized_image], [0], None, [256], [0, 256])

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(hist_original, color='b')
plt.title('Original Image Histogram')

plt.subplot(1, 2, 2)
plt.plot(hist_stretched, color='r')
plt.title('Stretched Image Histogram')

plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(stretched_image, cmap='gray')
plt.title('Contrast Stretched Image')

plt.subplot(1, 2, 2)
plt.imshow(equalized_image, cmap='gray')
plt.title('Histogram Equalized Image')

plt.tight_layout()
plt.show()

#555
import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread('img2.jpg', cv2.IMREAD_GRAYSCALE)

height, width = image.shape

bit_planes = np.zeros((8, height, width), dtype=np.uint8)

for i in range(8):
    bit_planes[i] = (image >> i) & 1

plt.figure(figsize=(12, 6))
for i in range(8):
    plt.subplot(2, 4, i+1)
    plt.imshow(bit_planes[i], cmap='gray')
    plt.title(f'Bit Plane {i+1}')
    plt.axis('off')

plt.tight_layout()
plt.show()





